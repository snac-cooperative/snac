#!/usr/bin/env php
<?php
/**
 * Fix the vocabulary 
 *
 * @author Robbie Hott
 * @license http://opensource.org/licenses/BSD-3-Clause BSD 3-Clause
 * @copyright 2015 the Rector and Visitors of the University of Virginia, and
 *            the Regents of the University of California
 */
// Include the global autoloader generated by composer
include "../vendor/autoload.php";

use \Monolog\Logger;
use \Monolog\Handler\StreamHandler;

// Set up the global log stream
$log = new StreamHandler("fix_vocabulary.log", Logger::WARNING);

// Did we parse a file?
$parsedFile = false;

// SNAC Postgres DB Handler
$dbu = new snac\server\database\DBUtil();

// SNAC Database Connectior
$db = new snac\server\database\DatabaseConnector();

// SNAC Postgres User Handler
$dbuser = new \snac\server\database\DBUser();
$tempUser = new \snac\data\User();
$tempUser->setUserName("system@localhost");
$user = $dbuser->readUser($tempUser);
$user->generateTemporarySession();


if (is_dir($argv[1])) {
    // Create new parser
    $e = new \snac\util\EACCPFParser();
    $e->setConstellationOperation("insert");
    printf("Done creating new parser.\n");

    $icIDs = array();
    $res = $db->query("select distinct ic_id from subject where term_id is null order by ic_id asc;", array());
    while (($row = $db->fetchRow($res)) != null) {
        $icIDs[$row["ic_id"]] = true;
    }
    $res = $db->query("select distinct ic_id from occupation where occupation_id is null order by ic_id asc;", array());
    while (($row = $db->fetchRow($res)) != null) {
        $icIDs[$row["ic_id"]] = true;
    }
    $res = $db->query("select distinct ic_id from function where function_id is null order by ic_id asc;", array());
    while (($row = $db->fetchRow($res)) != null) {
        $icIDs[$row["ic_id"]] = true;
    }
    $res = $db->query("select distinct ic_id from nationality order by ic_id asc;", array());
    while (($row = $db->fetchRow($res)) != null) {
        $icIDs[$row["ic_id"]] = true;
    }

    echo "Going to parse over " . count($icIDs) . " constellations...\n\n";
    $count = 0;
    
    foreach ($icIDs as $icID => $junkBoolean) {

        //$icID = 372;//84;
        //$icID = 965520;

        // read the full constellation
        echo "Reading: $icID\n";
        $read = $dbu->readConstellation($icID, null, \snac\server\database\DBUtil::$FULL_CONSTELLATION);
        
        // Create a full path file name
        list($junk, $parts) = explode("ark:/", $read->getArk());
        list($p1, $p2) = explode("/", $parts);
        $filename = $argv[1]."/$p1-$p2.xml";

        // Print out a message stating that this file is being parsed
        echo "Parsing: $filename\n";

        $constellation = $e->parseFile($filename);

        // SUBJECTS 
        $subjects = array();
        $subjectUse = array();
        $subjectUpdate = array();

        foreach ($read->getSubjects() as $subject) {
            if ($subject->getTerm() === null) {
                array_push($subjectUse, array("id"=>$subject->getID(), "version"=>$subject->getVersion()));
            } else {
                array_push($subjects, array("id"=>$subject->getTerm()->getID(), "value"=>$subject->getTerm()->getTerm()));
            }
        }

        foreach ($constellation->getSubjects() as $subject) {
            if ($subject->getTerm() === null) {
                echo "ERROR: empty parsed subject. ICID: $icID\n";
                continue;
            }
            $found = false;
            foreach ($subjects as $search) {
                if ($subject->getTerm()->getTerm() === $search["value"]) {
                    if ($subject->getTerm()->getID() !== $search["id"])
                        echo "WARN:  values match but ids don't, ignoring: {$search["value"]}\n";
                
                    $found = true;
                    break;
                }
            }
            if (!$found) {
                $toupdate = array_pop($subjectUse);
                if ($toupdate === null || $toupdate === false) {
                    die("ERROR: no additional subjects to pull from!\n");
                }
                array_push($subjectUpdate, array_merge($toupdate, array("term_id" => $subject->getTerm()->getID())));
            }

        }

        // OCCUPATIONS
        $occupations = array();
        $occupationUse = array();
        $occupationUpdate = array();

        foreach ($read->getOccupations() as $occupation) {
            if ($occupation->getTerm() === null) {
                array_push($occupationUse, array("id"=>$occupation->getID(), "version"=>$occupation->getVersion()));
            } else {
                array_push($occupations, array("id"=>$occupation->getTerm()->getID(), "value"=>$occupation->getTerm()->getTerm()));
            }
        }

        foreach ($constellation->getOccupations() as $occupation) {
            if ($occupation->getTerm() === null) {
                echo "ERROR: empty parsed occupation. ICID: $icID\n";
                continue;
            }
            $found = false;
            foreach ($occupations as $search) {
                if ($occupation->getTerm()->getTerm() === $search["value"]) {
                    if ($occupation->getTerm()->getID() !== $search["id"])
                        echo "WARN:  values match but ids don't, ignoring: {$search["value"]}\n";
                
                    $found = true;
                    break;
                }
            }
            if (!$found) {
                $toupdate = array_pop($occupationUse);
                if ($toupdate === null || $toupdate === false) {
                    die("ERROR: no additional occupations to pull from!\n");
                }
                array_push($occupationUpdate, array_merge($toupdate, array("term_id" => $occupation->getTerm()->getID())));
            }

        }

        // Activities
        $activities = array();
        $activityUse = array();
        $activityUpdate = array();

        foreach ($read->getActivities() as $activity) {
            if ($activity->getTerm() === null) {
                array_push($activityUse, array("id"=>$activity->getID(), "version"=>$activity->getVersion()));
            } else {
                array_push($activities, array("id"=>$activity->getTerm()->getID(), "value"=>$activity->getTerm()->getTerm()));
            }
        }

        foreach ($constellation->getActivities() as $activity) {
            if ($activity->getTerm() === null) {
                echo "ERROR: empty parsed function. ICID: $icID\n";
                continue;
            }
            $found = false;
            foreach ($activities as $search) {
                if ($activity->getTerm()->getTerm() === $search["value"]) {
                    if ($activity->getTerm()->getID() !== $search["id"])
                        echo "WARN:  values match but ids don't, ignoring: {$search["value"]}\n";
                
                    $found = true;
                    break;
                }
            }
            if (!$found) {
                $toupdate = array_pop($activityUse);
                if ($toupdate === null || $toupdate === false) {
                    die("ERROR: no additional functions to pull from!\n");
                }
                array_push($activityUpdate, array_merge($toupdate, array("term_id" => $activity->getTerm()->getID())));
            }

        }

        // Nationalities
        $nationalityUse = array();
        $nationalityUpdate = array();

        // All nationalities will be updated!
        foreach ($read->getNationalities() as $nationality) {
            array_push($nationalityUse, array("id"=>$nationality->getID(), "version"=>$nationality->getVersion()));
        }

        foreach ($constellation->getNationalities() as $nationality) {
            if ($nationality->getTerm() === null) {
                echo "ERROR: empty parsed nationality. ICID: $icID\n";
                continue;
            }
            $found = false;
            if (!$found) {
                $toupdate = array_pop($nationalityUse);
                if ($toupdate === null || $toupdate === false) {
                    die("ERROR: no additional nationalities to pull from!\n");
                }
                array_push($nationalityUpdate, array_merge($toupdate, array("term_id" => $nationality->getTerm()->getID())));
            }

        }

        // Update the database
        foreach ($subjectUpdate as $subject) {
            $res = $db->query("update subject set term_id = $1 where id = $2 and version = $3;", 
                array($subject["term_id"], $subject["id"], $subject["version"]));
        }
        foreach ($activityUpdate as $activity) {
            $res = $db->query("update function set function_id = $1 where id = $2 and version = $3;", 
                array($activity["term_id"], $activity["id"], $activity["version"]));
        }
        foreach ($occupationUpdate as $occupation) {
            $res = $db->query("update occupation set occupation_id = $1 where id = $2 and version = $3;", 
                array($occupation["term_id"], $occupation["id"], $occupation["version"]));
        }
        foreach ($nationalityUpdate as $nationality) {
            $res = $db->query("update nationality set term_id = $1 where id = $2 and version = $3;", 
                array($nationality["term_id"], $nationality["id"], $nationality["version"]));
        }

        if (($count++ % 1000) === 0) {
            echo "**Parsed $count entries\n";
        }

    }






}

// If no file was parsed, then print the output that something went wrong
if ($parsedFile == false) {
    echo "No files in directory\n\n"
        . "Reads files from the snac merged cpf directory (1st argument),\n"
        . "then parses the files into Identity Constellations and adds them\n"
        . "to the database using standard DBUtil calls (as if it were the server).\n"
        . "Sample usage: ./ingest_sample.php /path/to/directory\n\n";
}
