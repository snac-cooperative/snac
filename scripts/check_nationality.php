#!/usr/bin/env php
<?php
/**
 * Read through the ISO standard Nationalities and check the SNAC vocabulary
 * against those terms, both the code and the country name from ISO.  This script
 * generates two files, those that match ISO and those that don't. 
 *
 * @author Robbie Hott
 * @license http://opensource.org/licenses/BSD-3-Clause BSD 3-Clause
 * @copyright 2015 the Rector and Visitors of the University of Virginia, and
 *            the Regents of the University of California
 */
// Include the global autoloader generated by composer
include "../vendor/autoload.php";

use \Monolog\Logger;
use \Monolog\Handler\StreamHandler;

// Set up the global log stream
$log = new StreamHandler("fix_nationality.log", Logger::WARNING);

// Did we parse a file?
$parsedFile = false;

// SNAC Postgres DB Handler
$dbu = new snac\server\database\DBUtil();

// SNAC Database Connectior
$db = new snac\server\database\DatabaseConnector();

// SNAC Postgres User Handler
/*
$dbuser = new \snac\server\database\DBUser();
$tempUser = new \snac\data\User();
$tempUser->setUserName("system@localhost");
$user = $dbuser->readUser($tempUser);
$user->generateTemporarySession();
 */

$isoList = array();
$isoClean = array();
$isoLookup = array();
$isoMatching = array();
if (($handle = fopen("isonationality.csv", "r")) !== FALSE) {
    while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {
        $isoList[$data[0]] = trim($data[1]);
        $isoClean[$data[0]] = str_replace(" ", "", trim(strtolower($data[1])));
        $isoMatching[$data[0]] = [];
    }
    fclose($handle);
}

$isoLookup = array_flip($isoClean);
print_r($isoList);

$missing = array();
$res = $db->query("select id, value, description from vocabulary where type = 'nationality' order by value asc;", array());
while (($row = $db->fetchRow($res)) != null) {
    $data = [
        "id" => $row["id"],
        "value" => $row["value"],
        "desc" => $row["description"]
    ];
    $clean = trim(str_replace([" ", ":", "."], "", strtolower($row["value"])));
    if(isset($isoLookup[$clean])) {
        array_push($isoMatching[$isoLookup[$clean]], $data);
    } else if (isset($isoClean[strtoupper($clean)])) {
        array_push($isoMatching[strtoupper($clean)], $data);
    } else {
        array_push($missing, $data);
    }

}

print_r($isoMatching);
print_r($missing);

if (($handle = fopen("nationality_matching.csv", "w")) !== FALSE) {
    foreach ($isoMatching as $code => $list) {
        $row = array($code, $isoList[$code]);
        foreach ($list as $data) {
            array_push($row, $data["value"]);
        }
        fputcsv($handle, $row);
    }
    fclose($handle);
}

if (($handle = fopen("nationality_nonmatching.csv", "w")) !== FALSE) {
    foreach ($missing as $row) {
        fputcsv($handle, $row);
    }
    fclose($handle);
}


/*
if (is_dir($argv[1])) {
    // get all constellations with nationalities
    $icIDs = array();
    $res = $db->query("select distinct ic_id from nationality order by ic_id asc;", array());
    while (($row = $db->fetchRow($res)) != null) {
        $icIDs[$row["ic_id"]] = true;
    }

    foreach ($icIDs as $icID => $junkBoolean) {

        //$icID = 372;//84;
        //$icID = 965520;

        // read the full constellation
        echo "Reading: $icID\n";
        $read = $dbu->readConstellation($icID, null, \snac\server\database\DBUtil::$FULL_CONSTELLATION);
        
        // Nationalities
        $nationalityUse = array();
        $nationalityUpdate = array();

        // All nationalities used
        foreach ($read->getNationalities() as $nationality) {
            array_push($nationalityUse, array("id"=>$nationality->getID(), "version"=>$nationality->getVersion()));
        }

        foreach ($nationalityUpdate as $nationality) {
            $res = $db->query("update nationality set term_id = $1 where id = $2 and version = $3;", 
                array($nationality["term_id"], $nationality["id"], $nationality["version"]));
        }

    }

}
 */

