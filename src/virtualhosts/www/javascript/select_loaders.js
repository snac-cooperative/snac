!function(I){var g={};function C(A){if(g[A])return g[A].exports;var e=g[A]={i:A,l:!1,exports:{}};return I[A].call(e.exports,e,e.exports,C),e.l=!0,e.exports}C.m=I,C.c=g,C.d=function(I,g,A){C.o(I,g)||Object.defineProperty(I,g,{enumerable:!0,get:A})},C.r=function(I){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(I,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(I,"__esModule",{value:!0})},C.t=function(I,g){if(1&g&&(I=C(I)),8&g)return I;if(4&g&&"object"==typeof I&&I&&I.__esModule)return I;var A=Object.create(null);if(C.r(A),Object.defineProperty(A,"default",{enumerable:!0,value:I}),2&g&&"string"!=typeof I)for(var e in I)C.d(A,e,function(g){return I[g]}.bind(null,e));return A},C.n=function(I){var g=I&&I.__esModule?function(){return I.default}:function(){return I};return C.d(g,"a",g),g},C.o=function(I,g){return Object.prototype.hasOwnProperty.call(I,g)},C.p="",C(C.s=1)}([,function(module,exports){eval('/**\n * Select Box Loaders\n *\n * Functions that can be used to replace select boxes on the edit page with\n * pretty-formatted versions using JQuery and Select2\n *\n * @author Robbie Hott\n * @license https://opensource.org/licenses/BSD-3-Clause BSD 3-Clause\n * @copyright 2015 the Rector and Visitors of the University of Virginia, and\n *            the Regents of the University of California\n */\n\n/**\n * Replace a select that is linked to a Vocabulary search\n *\n * Replaces the select with a select2 object capable of making AJAX queries\n *\n * @param  JQuery selectItem The JQuery item to replace\n * @param  string idMatch    ID string for the object on the page\n * @param  string type       The type of the vocabulary term\n * @param  int    minLength  The minimum required length of the autocomplete search\n */\nfunction vocab_select_replace(selectItem, idMatch, type, minLength) {\n    if (minLength === undefined) {\n        minLength = 2;\n    }\n\n    if (selectItem.attr(\'id\').endsWith(idMatch) && !selectItem.attr(\'id\').endsWith("ZZ")) {\n        selectItem.select2({\n            ajax: {\n                url: function () {\n                    var query = snacUrl + "/vocabulary?type=" + type + "&id=";\n                    query += $("#constellationid").val() + "&version=" + $("#version").val();\n                    query += "&entity_type=" + $("#entityType").val();\n                    return query;\n                },\n                dataType: \'json\',\n                delay: 250,\n                data: function (params) {\n                    return {\n                        q: params.term,\n                        page: params.page\n                    };\n                },\n                processResults: function (data, page) {\n                    return { results: data.results };\n                },\n                cache: true\n            },\n            width: \'100%\',\n            minimumInputLength: minLength,\n            allowClear: true,\n            theme: \'bootstrap\',\n            placeholder: \'Select\'\n        });\n    }\n}\n\nvar geoPlaceSearchResults = null;\n\nfunction geovocab_select_replace(selectItem, idMatch) {\n    var minLength = 2;\n\n    if (selectItem.attr(\'id\').endsWith(idMatch) && !selectItem.attr(\'id\').endsWith("ZZ")) {\n        selectItem.select2({\n            ajax: {\n                url: function () {\n                    var query = snacUrl + "/vocabulary?type=geo_place&format=term";\n                    query += "&entity_type=" + $("#entityType").val();\n                    return query;\n                },\n                dataType: \'json\',\n                delay: 250,\n                data: function (params) {\n                    return {\n                        q: params.term,\n                        page: params.page\n                    };\n                },\n                processResults: function (data, page) {\n                    if (data.results) {\n                        geoPlaceSearchResults = data.results;\n                        var selectResults = new Array();\n                        data.results.forEach(function (result) {\n                            selectResults.push({\n                                id: result.id,\n                                text: result.name + " (" + result.administrationCode + ", " + result.countryCode + ")"\n                            });\n                        });\n                        return { results: selectResults };\n                    }\n                    return { results: null };\n                },\n                cache: true\n            },\n            width: \'100%\',\n            minimumInputLength: minLength,\n            allowClear: true,\n            theme: \'bootstrap\',\n            placeholder: \'Select\'\n        });\n    }\n}\n\nvar lastSourceSearchResults = null;\n\n/**\n * Add <br> helper script\n *\n * Adds <br> to strings so that they can be shown to the user in HTML\n * after being input into a text-only field.\n */\nfunction addbr(str) {\n    if (typeof str !== \'undefined\' && str !== null) {\n        return (str + \'\').replace(/(\\r\\n|\\n\\r|\\r|\\n)/g, \'<br>\' + \'$1\');\n    }\n    return \'\';\n}\n\n/**\n * Replace a select that is linked to a Constellation Source search\n *\n * Replaces the select with a select2 object capable of making AJAX queries\n *\n * @param  JQuery selectItem The JQuery item to replace\n * @param  string idMatch    ID string for the object on the page\n */\nfunction scm_source_select_replace(selectItem, idMatch) {\n    if (selectItem.attr(\'id\').endsWith(idMatch) && !selectItem.attr(\'id\').endsWith("ZZ")) {\n        selectItem.select2({\n            ajax: {\n                url: function () {\n                    var query = snacUrl + "/vocabulary?type=ic_sources&id=";\n                    query += $("#constellationid").val() + "&version=" + $("#version").val();\n                    query += "&entity_type=" + $("#entityType").val();\n                    return query;\n                },\n                dataType: \'json\',\n                delay: 250,\n                data: function (params) {\n                    return {\n                        q: params.term,\n                        page: params.page\n                    };\n                },\n                processResults: function (data, page) {\n                    // Modify the results to be in the format we want\n                    lastSourceSearchResults = data.results;\n                    // need id, text\n                    var results = new Array();\n                    data.results.forEach(function (res) {\n                        results.push({ id: res.id, text: res.displayName });\n                    });\n                    return { results: results };\n                },\n                cache: true\n            },\n            width: \'100%\',\n            minimumInputLength: 0,\n            allowClear: true,\n            theme: \'bootstrap\',\n            placeholder: \'Select\'\n        });\n\n        selectItem.on(\'change\', function (evt) {\n            // TODO: Get the current selected value and update the well in the page to reflect it!\n            // Note: all the selections are available in the global lastSourceSearchResults variable.\n            var sourceID = $(this).val();\n            var inPageID = $(this).attr("id");\n            var idArray = inPageID.split("_");\n            if (idArray.length >= 6) {\n                var i = idArray[5];\n                var j = idArray[4];\n                var shortName = idArray[1];\n                lastSourceSearchResults.forEach(function (source) {\n                    if (source.id == sourceID) {\n                        // Update the text of the source\n                        if (typeof source.text !== \'undefined\') {\n                            $("#scm_" + shortName + "_source_text_" + j + "_" + i).html(addbr(source.text)).removeClass(\'hidden\');\n                            $("#scm_" + shortName + "_source_text_" + j + "_" + i).closest(".panel-body").removeClass(\'hidden\');\n                        } else {\n                            $("#scm_" + shortName + "_source_text_" + j + "_" + i).text("").addClass(\'hidden\');\n                            $("#scm_" + shortName + "_source_text_" + j + "_" + i).closest(".panel-body").addClass(\'hidden\');\n                        }\n                        // Update the URI of the source\n                        if (typeof source.uri !== \'undefined\') $("#scm_" + shortName + "_source_uri_" + j + "_" + i).html(\'<a href="\' + source.uri + \'" target="_blank">\' + source.uri + \'</a>\');else $("#scm_" + shortName + "_source_uri_" + j + "_" + i).html(\'\');\n                        // Update the URI of the source\n                        if (typeof source.citation !== \'undefined\') $("#scm_" + shortName + "_source_citation_" + j + "_" + i).html(source.citation).removeClass(\'hidden\');else $("#scm_" + shortName + "_source_citation_" + j + "_" + i).html(\'\').addClass(\'hidden\');\n                    }\n                });\n            }\n        });\n    }\n}\n\n/**\n * Replace a select that is linked to an affiliation search\n *\n * Replaces the select with a select2 object capable of making AJAX queries\n *\n * @param  JQuery selectItem The JQuery item to replace\n */\nfunction affiliation_select_replace(selectItem) {\n    $.get(snacUrl + "/vocabulary?type=affiliation").done(function (data) {\n        var options = data.results;\n        selectItem.select2({\n            data: options,\n            allowClear: true,\n            theme: "bootstrap",\n            placeholder: "Select Affiliation"\n        });\n    });\n}\n\nfunction reviewer_select_replace(selectItem) {\n    if (selectItem != null) {\n        selectItem.select2({\n            placeholder: "Reviewer Name or Email...",\n            ajax: {\n                url: function () {\n                    var query = snacUrl + "/user_search?role=Reviewer";\n                    return query;\n                },\n                dataType: \'json\',\n                delay: 250,\n                data: function (params) {\n                    return {\n                        q: params.term,\n                        page: params.page\n                    };\n                },\n                processResults: function (data, page) {\n                    return { results: data.results };\n                },\n                cache: true\n            },\n            width: \'100%\',\n            minimumInputLength: 1,\n            allowClear: false,\n            theme: \'bootstrap\'\n        });\n    }\n}\n\nfunction select_replace(selectItem, idMatch) {\n    if (selectItem.attr(\'id\').endsWith(idMatch) && !selectItem.attr(\'id\').endsWith("ZZ")) {\n        selectItem.select2({\n            allowClear: true,\n            theme: \'bootstrap\'\n        });\n    }\n}\n\nfunction select_replace_simple(selectItem) {\n    selectItem.select2({\n        width: \'100%\',\n        allowClear: true,\n        theme: \'bootstrap\'\n    });\n}\n\nfunction sayHi(user) {\n    return `Hello, ${user}!`;\n}\n\nfunction sayBye(user) {\n    return `Bye bye, ${user}!`;\n}\n\n/**\n * Load Vocab Select Options\n *\n * Replaces the select with a select2 object preloaded with an array of options\n *\n * @param  JQuery selectItem The JQuery item to replace\n * @param  string type       The type of the vocabulary term\n * @param  string type       Text placeholder for select\n */\nfunction loadVocabSelectOptions(selectItem, type, placeholder) {\n    return $.get(snacUrl + "/vocabulary?type=" + type).done(function (data) {\n        var options = data.results;\n        selectItem.select2({\n            data: options,\n            allowClear: false,\n            theme: \'bootstrap\',\n            placeholder: placeholder\n        });\n    });\n}\n\n/**\n * Replace all the selects that exist on the page when the page has finished loading\n */\n$(document).ready(function () {\n\n    // Use select2 to display the select dropdowns\n    // rather than the HTML default\n    $("select").each(function () {\n        if (typeof $(this).attr(\'id\') !== typeof undefined && $(this).attr(\'id\') !== false) {\n            // Replace the subject selects\n            vocab_select_replace($(this), "language_language_", "language_code", 1);\n\n            // Replace the subject selects\n            vocab_select_replace($(this), "language_script_", "script_code", 1);\n\n            // Replace the subject selects\n            vocab_select_replace($(this), "subject_", "subject", 4);\n\n            // Replace the function selects\n            vocab_select_replace($(this), "function_", "function", 4);\n\n            // Replace the occupation selects\n            vocab_select_replace($(this), "occupation_", "occupation", 4);\n\n            // Replace the entityType select\n            vocab_select_replace($(this), "entityType", "entity_type", 0);\n        }\n    });\n\n    // Replace the Affiliation dropdowns, if one exists\n    if ($("#affiliationid").exists()) affiliation_select_replace($("#affiliationid"));\n\n    // Replace the User search dropdown, if one exists\n    if ($("#reviewersearchbox").exists()) reviewer_select_replace($("#reviewersearchbox"));\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n')}]);